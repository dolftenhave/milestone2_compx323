import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.Random;

/**
 * @author Dolf ten Have
 * @date 15/04/2025
 *
 *       This program is designed to create lines of CSV data. This is done
 *       based on the table generated by parseArgs.
 *       It's aim is to do this isn a performant manner.
 */

public class MakeCSV {

	private static final String usage = "usage: java MakeCSV <n-lines> <path/to/table/file> <output name>";
	private static final int MIN_YEAR = 1925; // 100 years for now
	private static final int fileValue = 4;
	private static final int seqVarcharValue = 7;
	private static final int seqFileValue = 8;
	private static final String charSet[] = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
			"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
			"k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
	private static final int COMMA_VALUE = 10;

	private static int length;
	private static String outputFileName;
	private static final int GEN_TABLE_WIDTH = 3;
	private static int genTable[][]; // The generation table
	private static RandomAccessFile files[]; // An array that contains all buffered readers that link to external files
	private static BufferedReader seqFiles[]; // An array that contains the requential file readers
	private static String seqFilePaths[];
	private static String line[];
	private static int seqVarchar[][];

	private static BufferedWriter out;
	private static int row; // The index of the genTable row that the program is currently on

	private static Random rand;

	/**
	 * @param args [0] number of lines to generate; [1] path to the gen table; [2]
	 *             optional. Name of the output file
	 */
	public static void main(String args[]) {
		try {
			length = Integer.parseInt(args[0]);
		} catch (Exception e) {
			System.out.println("'" + args[0] + "' is not a valid length.");
			System.exit(1);
		}

		if (args.length > 2) {
			outputFileName = args[2];
		} else {
			System.err.println("Please supply an output name for your file");
			System.exit(1);
		}

		initializeGenTable(args[1]);
		makeCSV();
		System.out.println("MakeCSV: data written too '" + outputFileName + ".csv'");
	}

	/**
	 * Reads and initialises all componenets of the gen and files arrays
	 */
	private static void initializeGenTable(String tablePath) {
		BufferedReader readTable;
		String in[];
		int fileCount = 0; // A counter that keeps track of how many files have currently been added
		int seqFileCount = 0;
		int seqVarcharCount = 0;
		try {
			readTable = new BufferedReader(new FileReader(tablePath));

			// Reads the file head initialisesing the gen table arrays
			in = readTable.readLine().split(" ");
			genTable = new int[(Integer.parseInt(in[0]) * 2) - 1][GEN_TABLE_WIDTH];
			files = new RandomAccessFile[Integer.parseInt((in[1]))];
			seqVarchar = new int[Integer.parseInt(in[2])][Integer.parseInt(in[3])];
			seqFiles = new BufferedReader[Integer.parseInt(in[4])];
			seqFilePaths = new String[Integer.parseInt(in[4])];

			// Reads the rest of the file into the genTable array
			for (int i = 0; i < genTable.length; i++) {
				if ((i % 2) == 0) {
					in = readTable.readLine().split(" ");
					genTable[i][0] = Integer.parseInt(in[0]);
					if (in.length > 1) {
						// If this is a file line, initialise a new reader and add it to the readed
						// array. Adding the index of the reader within that array to the gentable array
						if (genTable[i][0] == fileValue) {
							files[fileCount] = new RandomAccessFile(in[1], "r");
							genTable[i][1] = fileCount;
							fileCount++;
							genTable[i][2] = Integer.parseInt(in[2]);
							// Otherwise read the rest of the lines as normal and add them to the gentTable
							// array
						} else if (genTable[i][0] == seqFileValue) {
							seqFiles[seqFileCount] = new BufferedReader(new FileReader(in[1]));
							seqFilePaths[i] = in[1];
							genTable[i][1] = seqFileCount;
							seqFileCount++;
							genTable[i][2] = Integer.parseInt(in[2]);
						} else if (genTable[i][0] == seqVarcharValue) {
							genTable[i][2] = Integer.parseInt(in[1]);
							genTable[i][1] = seqVarcharCount;
							seqVarcharCount++;
						} else {
							for (int j = 1; j < in.length; j++) {
								genTable[i][j] = Integer.parseInt(in[j]);
							}
						}
					}
				} else {
					genTable[i][0] = COMMA_VALUE;
				}
			}
			readTable.close();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}
		printArray();
	}

	private static void printArray() {
		for (int i = 0; i < genTable.length; i++) {
			for (int j = 0; j < genTable[0].length; j++) {
				System.out.print(genTable[i][j]);
				System.out.print(" ");
			}
			System.out.println("");
		}
	}

	/**
	 * This method will create the csv file, one line at a time and write it out to
	 * the file
	 */
	private static void makeCSV() {

		rand = new Random();
		try {
			out = new BufferedWriter(new FileWriter(outputFileName + ".csv"));
			for (int i = 0; i < length - 1; i++) {
				writeLine();
				out.newLine();
			}
			writeLine();
			out.close();

		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}

	}

	/**
	 * This method sends the next item in the genTable to the right method for
	 * generating that data type
	 */
	private static void writeLine() {

		for (int j = 0; j < genTable.length; j++) {
			row = j;
			switch (genTable[j][0]) {
				case 0:
					varchar(genTable[j][1]);
					break;
				case 1:
					int_(genTable[j][1]);
					break;
				case 2:
					date();
					break;
				case 3:
					time();
					break;
				case 4:
					file();
					break;
				case 5:
					double_();
					break;
				case 6:
					seqInt();
					break;
				case 7:
					seqVarchar();
					break;
				case 8:
					seqFile();
					break;
				case 9:
					timestamp();
					break;
				case 10:
					comma();
					break;
				default:
					System.err.println("Uknown data type'" + genTable[j][0] + "'");
					System.exit(1);
					break;
			}
		}
	}

	/**
	 * Writes out the given data to the csv file
	 */
	private static void write(String s) {
		try {
			out.write(s, 0, s.length());
			out.flush();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}

	}

	/**
	 * Writes aphabetical letters to the file of length Length
	 * 
	 * @param length the lenght of the random String
	 */
	private static void varchar(int length) {
		for (int i = 0; i < length; i++) {
			write(charSet[rand.nextInt(charSet.length)]);
		}
	}

	/**
	 * Writes a random integer between 0 and the max Length
	 * 
	 * @param maxSize the maximum length of the integer
	 */
	private static void int_(int maxSize) {
		write(String.valueOf(rand.nextInt(maxSize + 1)));
	}

	/**
	 * Writes a random date
	 */
	private static void date() {
		write(rand.nextInt(1, 28) + "-" + rand.nextInt(1, 12) + "-" + rand.nextInt(MIN_YEAR, 2025));
	}

	/**
	 * Writes a random time value in the format HH:MM:SS
	 */
	private static void time() {
		int_(rand.nextInt(24));
		write(":");
		int_(rand.nextInt(60));
		write(":");
		int_(rand.nextInt(60));
	}

	/**
	 * reades data from a random line in a file that is then written out to a
	 * specific column in that file
	 */
	private static void file() {
		try {
			// Use Random access file to search untill the end of the line. Then read the
			// line into here
			// Then use that line too write into the new file.

			String line[] = files[genTable[row][2]].readLine().split(",");
			out.write(line[genTable[row][3]]);
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}
	}

	/**
	 * writes arandom double
	 */
	private static void double_() {
		int_(genTable[row][1]);
		write(".");
		int_(genTable[row][2]);
	}

	/**
	 * writes the current value of the int in the genTable and then increases the
	 * count
	 */
	private static void seqInt() {
		write(String.valueOf(genTable[row][1]));
		genTable[row][1]++;
	}

	/**
	 * Writes a sequential string of varchar characters of a fixed length
	 * TODO
	 */
	private static void seqVarchar() {
		int p = genTable[row][1];
		for (int i = 0; i < seqVarchar[0].length; i++) {

			write(charSet[seqVarchar[p][i] % 52]);
			if (i == seqVarchar[p].length - 1)
				seqVarchar[p][seqVarchar[p].length - 1]++;
			// If the current number rolls over back to zero, then increase the previous
			// number
			// in array by 1. Unless this is the last position
			if (seqVarchar[p][i] > 0 && seqVarchar[p][i] % charSet.length == 0) {
				if (i != 0)
					seqVarchar[p][(i - 1) % genTable[row][2]]++;
			}

		}
	}

	/**
	 * Will requentially read from another a column in another file until the end is reached. At that point it will start from the top again 
	 */
	private static void seqFile() {
			String in;
		try{
			in = seqFiles[row].readLine();
			if(in != null){
				line = in.split(",");
				write(line[genTable[row][2]]);
			//If the the end of the file is reached "reset" and start reading again from the top 
			}else{
				seqFiles[row].close();
			seqFiles[row] = new BufferedReader(new FileReader(seqFilePaths[row]));
			seqFile();
			}
		}catch(Exception e){
			e.printStackTrace(System.err);
		}
	}

	/**
	 * Writes a timestamp in the format 'YYYY:MM-DD HH:MM:SS'
	 */
	private static void timestamp() {
		date();
		write(" ");
		time();
	}

	/**
	 * Write a comma value
	 */
	private static void comma() {
		write(",");
	}
}
