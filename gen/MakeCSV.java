import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.io.Reader;
import java.util.Random;

/**
 * @author Dolf ten Have
 * @date 15/04/2025
 *
 *       This program is designed to create lines of CSV data. This is done
 *       based on the table generated by parseArgs.
 *       It's aim is to do this isn a performant manner.
 */

public class MakeCSV {

	private static final String usage = "usage: java MakeCSV <n-lines> <path/to/table/file> <output name>";
	private static final int MIN_YEAR = 1925; // 100 years for now
	private static final int fileValue = 4;

	private static int length;
	private static String outputFileName;
	private static final int GEN_TABLE_WIDTH = 3;
	private static int genTable[][]; // The generation table
	private static RandomAccessFile files[]; // An array that contains all buffered readers that link to external files

	private static BufferedWriter out;
	private static int row; // The index of the genTable row that the program is currently on

	private static Random rand;
	/**
	 * @param args [0] number of lines to generate; [1] path to the gen table; [2]
	 *             optional. Name of the output file
	 */
	public static void main(String args[]) {
		try {
			length = Integer.parseInt(args[0]);
		} catch (Exception e) {
			System.out.println("'" + args[0] + "' was no in the correct format");
			System.exit(1);
		}

		if (args.length > 2) {
			outputFileName = args[2];
		} else {
			System.err.println("Please supply an output name for your file");
			System.exit(1);
		}

		initializeGenTable(args[1]);
		makeCSV();
	}

	/**
	 * Reads and initialises all componenets of the gen and files arrays
	 */
	private static void initializeGenTable(String tablePath) {
		BufferedReader readTable;
		String in[];
		int fileCount = 0; // A counter that keeps track of how many files have currently been added
		try {
			readTable = new BufferedReader(new FileReader(tablePath));

			// Reads the file head initialisesing the gen table arrays
			in = readTable.readLine().split(" ");
			genTable = new int[Integer.parseInt(in[0])][GEN_TABLE_WIDTH];
			files = new RandomAccessFile[Integer.parseInt(in[1])];

			// Reads the rest of the file into the genTable array
			for (int i = 0; i < genTable.length; i++) {
				in = readTable.readLine().split(" ");
				genTable[i][0] = Integer.parseInt(in[0]);
				if (in.length > 1) {
					// If this is a file line, initialise a new reader and add it to the readed
					// array. Adding the index of the reader within that array to the gentable array
					if (genTable[i][0] == fileValue) {
						files[fileCount] = new RandomAccessFile(in[1],"r");
						genTable[i][1] = fileCount;
						fileCount++;
						genTable[i][2] = Integer.parseInt(in[2]);
						// Otherwise read the rest of the lines as normal and add them to the gentTable
						// array
					} else {
						for (int j = 1; j < in.length; j++) {
							genTable[i][j] = Integer.parseInt(in[j]);
						}
					}
				}
			}
			readTable.close();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}
	}

	/**
	 * This method will create the csv file, one line at a time and write it out to
	 * the file
	 */
	private static void makeCSV() {

		rand = new Random();
		try {
			out = new BufferedWriter(new FileWriter(outputFileName + ".csv"));
			for (int i = 0; i < length - 1; i++) {
				writeLine();
				out.newLine();
			}
			writeLine();
			out.close();

		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}

	}

	/**
	 * This method sends the next item in the genTable to the right method for
	 * generating that data type
	 */
	private static void writeLine() {

		for (int j = 0; j < genTable.length; j++) {
			row = j;
			switch (genTable[j][0]) {
				case 0:
					varchar();
					break;
				case 1:
					int_();
					break;
				case 2:
					date();
					break;
				case 3:
					time();
					break;
				case 4:
					file();
					break;
				case 5:
					double_();
					break;
				default:
					System.err.println("Uknown data type'" + genTable[j][0] + "'");
					System.exit(1);
					break;
			}
		}
	}

	/**
	 * Writes out the given data to the csv file
	 */
	private static void write(String s) {
		try {
			out.write(s, 0, s.length());
			out.flush();
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(1);
		}

	}

	private static void varchar() {
		
	}

	private static void int_() {

	}

	/**
	 * Writes a random date 
	 */
	private static void date() {
		write(rand.nextInt(1, 28)+"-"+rand.nextInt(1,12)+"-"+rand.nextInt(MIN_YEAR, 2025));
	}

	private static void time() {

	}

	/**
	 * reades data from a random line in a file that is then written out to a specific column in that file
	 */
	private static void file() {
		try{
			//Use Random access file to search untill the end of the line. Then read the line into here
			//Then use that line too write into the new file.

			String line[] = files[genTable[row][2]].readLine().split(",");
			out.write(line[genTable[row][3]]);
		}catch(Exception e){
			e.printStackTrace(System.err);
			System.exit(1);
		}
	}

	private static void double_() {

	}
}
